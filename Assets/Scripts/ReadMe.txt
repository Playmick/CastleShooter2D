Для добавления новой механики:
1. Создаем скрипт Player(название механики, в нашем случае персонаж)
2. Наследуем Player от MonoBehaviour
3. Создаем скрипт PlayerInteractor
4. Наследуем PlayerInteractor от Interactor
5. В интеракторе создаем публичное свойство типа Player(get; private set;)
6. Переопределяем один из виртуальных методов родительского интерактора, например Initialize
7. Запускаем в нем базовый метод
8. В этом же переопределении создаем игрока из префаба либо через new GameObject и добавляем ему компонент Player
9. Если SceneConfig для текущей сцены создан, идём в 13 пункт, если нет то создаем

10. Cоздаем SurvivalSceneConfig наследуемся от SceneConfig
11. Записываем имя сцены в sceneName(в идеале создать константу для этого)
12. Переопределяем нужные методы, я щас хз какие тебе потребуются либо на создание репозиториев либо на создание интеракторов

13. Создаем репозитории и интеракторы(всем репозиториям нужны интеракторы, но не всем интеракторам репозитории, методы для создания у родителя) 

14. Если SceneManager для текущей сцены создан, то идём в пункт 18

15. Создаем CastleShooterSceneManager наследуемся от SceneManagerBase
16. Переопределяем метод InitSceneMap
17. Добавляем кофиг сцены this.sceneConfigMap[SurvivalSceneConfig.SCENE_NAME] = new SurvivalSceneConfig();

18. Класс Game наследуем от MonoBehaviour, делаем его синглтоном, независимым от нахождения на сцене 
19. В старте Game.Run а может даже лучше в Awake

20. В классе где нужна ссылка на что-либо, в старте подписать метод OnGameInitialized к Game.OnGameInitializedEvent
21. В OnGameInitialized отписываемся от ивента
22. создаем переменную под интерактор/репозиторий
23. получаем интерактор/репозиторий
24. не забываем проверить ссылку на null который будет если интерактор или репозиторий не успеет инициализироваться
25. Вуаля, ссылка на любую механику/данные прокинута через один единственный синглтон